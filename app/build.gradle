apply plugin: 'com.android.application'
apply plugin: 'realm-android'

android {
    compileSdkVersion 'Google Inc.:Google APIs:24'
    buildToolsVersion '24.0.3'

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled = true
        vectorDrawables.useSupportLibrary = true
    }

    //执行lint检查，有任何的错误或者警告提示，都会终止构建，我们可以将其关掉。
    lintOptions {
        abortOnError false
    }
    signingConfigs {
        debug {
            storeFile file("$rootDir/zcy.keystore")
            storePassword "zcyghost"
            keyAlias "zcy.keystore"
            keyPassword "zcyghost"
        }

        release {
            storeFile file("$rootDir/zcy.keystore")
            storePassword "zcyghost"
            keyAlias "zcy.keystore"
            keyPassword "zcyghost"
        }
    }
    //控制构建的输出，它能够覆盖控制构建输出的其他配置。
    //使用这个可以定义用于发布到Google play商店的特殊配置。
    buildTypes {
        release {
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            //混淆
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.replace(".apk", "-${defaultConfig.versionName}.apk")
                output.outputFileName = new File(outputFile.parent, fileName)
            }
        }
    }
    buildToolsVersion '26.0.2'
}


repositories {
    maven { url "https://jitpack.io" }
    google()
}

/***
 * 定义app的所有的依赖：
 * 　　第一行: fileTree方法调用本地依赖。
 * 　　　　包含libs子文件夹中的所有JAR文件。
 * 　　第二行：声明了一个外部依赖，从远程仓库获取。
 * 　　　公司id + 模块名称　+ 具体版本
 *
 * 本项目使用脚本config.gradle进行脚本统一管理
 * 　　优势：　当module多时可以更方便配置。
 *
 * 使用: apply from: "config.gradle"
 *
 * blog: http://www.jianshu.com/p/a092bcc3de7d
 */

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    //activity_swipe_base
    compile rootProject.ext.dependencies["appcompat-v7"]
    //network
    compile rootProject.ext.dependencies["retrofit"]
    compile rootProject.ext.dependencies["retrofit-converter-gson"]
    compile rootProject.ext.dependencies["retrofit-adapter-rxjava"]
    compile rootProject.ext.dependencies["okhttp-logging-interceptor"]
    compile rootProject.ext.dependencies["glide"]
    compile rootProject.ext.dependencies["glide-transformations"]
    //rx
    compile rootProject.ext.dependencies["rxjava"]
    compile rootProject.ext.dependencies["rxandroid"]
    //ui
    compile rootProject.ext.dependencies["easyrecyclerview"]
    compile rootProject.ext.dependencies["rollviewpager"]
    compile rootProject.ext.dependencies["smarttablayout"]
    compile rootProject.ext.dependencies["smarttablayout:utils"]
    compile rootProject.ext.dependencies["jiecaovideoplayer"]
    compile rootProject.ext.dependencies["cardstack"]
    compile rootProject.ext.dependencies["roundedimageview"]
    compile rootProject.ext.dependencies["cardview"]
    compile('com.github.afollestad.material-dialogs:core:0.8.5.4@aar') {
        transitive = true
    }
    compile('com.github.afollestad.material-dialogs:commons:0.8.5.4@aar') {
        transitive = true
    }
    compile rootProject.ext.dependencies["iconics-core"]
    compile rootProject.ext.dependencies["material-design-iconic-typeface"]
    compile rootProject.ext.dependencies["fontawesome-typeface"]
    compile rootProject.ext.dependencies["foundation-icons-typeface"]
    //dagger
    compile rootProject.ext.dependencies["dagger"]
    compile rootProject.ext.dependencies["dagger-compiler"]
    compile rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    provided rootProject.ext.dependencies["annotation"]
    compile rootProject.ext.dependencies["annotations"]
    //other
    compile rootProject.ext.dependencies["logger"]
    compile rootProject.ext.dependencies["fragmentation"]
    compile rootProject.ext.dependencies["androideventbus"]
    compile rootProject.ext.dependencies["pgyersdk"]
    compile rootProject.ext.dependencies["slf4j"]
    //canary
    debugCompile rootProject.ext.dependencies["blockcanary-android"]
    releaseCompile rootProject.ext.dependencies["blockcanary-no-op"]
    debugCompile rootProject.ext.dependencies["leakcanary-android"]
    releaseCompile rootProject.ext.dependencies["leakcanary-android-no-op"]
    //针对3.0的配置  3.0中apt --> annotationProcessor
    annotationProcessor"com.google.dagger:dagger-compiler:2.0.2"
}
/**
* Gradle Android 项目中所包含各个文件和文件夹简要描述
 * １. .gradle: 保存临时Gradle输出/缓存/支持其他元数据。
 * 2. app: 根据名称, 在根目录的一个文件夹下嵌入单个模块，　每个模块都包含一个Gradle文件。
 * 3. gradle : 文件夹下包含Gradle包装器。　一个JAR文件。
 * 4. build.gradle: 整个项目构建逻辑在这个文件中。
 * 5. gradle.properties: Gradle和JVM属性保存在这个文件中。
 * 6. local.properties: 定义与本地机器相关的属性。
 * 7. settings.gradle: 此文件在多项目构建或定义子项目的项目中是必须的。
 * 8. build: 所有输出都在此文件中。
* */